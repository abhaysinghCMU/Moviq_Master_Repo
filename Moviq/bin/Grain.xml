<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grain</name>
    </assembly>
    <members>
        <member name="M:Grain.Configuration.ConfigManager.GetConnectionString(System.String)">
            <summary>
            Gets the connection string value from the configuration file
            </summary>
            <param name="name">string: the name of the connection string</param>
            <returns>string: a database connection string</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetConnectionString(System.String)">
            <summary>
            Tries to get the connection string value from the configuration file.  Returns null if it is not found.
            </summary>
            <param name="name">string: the name of the connection string</param>
            <returns>string: a database connection string</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetConnectionString(System.String,System.String)">
            <summary>
            Tries to get the connection string value from the configuration file.  Returns null if it is not found.
            </summary>
            <param name="name">string: the name of the connection string</param>
            <param name="defaultValue">string: the value to use if a connection string is not found</param>
            <returns>string: a database connection string</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.GetValue(System.String)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config).  If no key is found, an exception is thrown.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <returns>string: the value of the key value pair.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValue(System.String)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config).  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValue(System.String,System.String)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config).  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueFromBinaryAs``1(System.String,``0)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as Type T.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueAs``1(System.String,Grain.Serialization.SerializationTypes,``0)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as Type T.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="type">SerializationTypes: the type of serializer to use</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueAs``1(System.String,``0,System.Func{System.String,``0},System.Func{``0,System.String})">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as Type T.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <param name="fromStringBinder">The factory that converts the string that is retrieved from data, to the final value</param>
            <param name="toStringBinder">the facotry that converts the defaultValue to a string, if the setting needs to be created</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueAsInt(System.String,System.Int32)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as an int.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueAsBool(System.String,System.Boolean)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as a bool.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetValueAsDateTime(System.String,System.DateTime)">
            <summary>
            Tries to get a value from the config file (App.config, Web.config) as a DateTime.  Returns null if no key is found.
            </summary>
            <param name="key">string: the key of the key value pair.</param>
            <param name="defaultValue">string: the value to use of a setting with this key is not found</param>
            <returns>string: the value of the key value pair or null.</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.GetSection``1(System.String)">
            <summary>
            Gets the section value from the configuration file
            </summary>
            <param name="fullyQualifiedName">string: the name of the section (i.e. @"system.web/compilation")</param>
            <returns>string: a database connection string</returns>
        </member>
        <member name="M:Grain.Configuration.ConfigManager.TryGetSection``1(System.String,``0)">
            <summary>
            Gets the section value from the configuration file
            </summary>
            <param name="fullyQualifiedName">string: the name of the section (i.e. @"system.web/compilation")</param>
            <returns>string: a database connection string</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.Execute(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a non-query Transact-SQL statement and returns the number of rows that were affected (assuming NOCOUNT is not on)
            </summary>
            <param name="command">SqlCommand: the command to be executed</param>
            <returns>int: if NOCOUNT is on, on the database, the number of rows that were affected</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAsSingle``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand and returns a single result via a factory pattern (selector param).  If more than one result 
            was present in the SQL execution, all but the first are omitted.
            </summary>
            <typeparam name="T">The type of output object</typeparam>
            <param name="command">SqlCommand: the command to execute</param>
            <param name="modelBinder">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <returns>IEnumerable of type T: the result set bound to a model, by way of the selector factory.</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand and returns the results via a factory pattern (selector param)
            </summary>
            <typeparam name="T">The type of output object</typeparam>
            <param name="command">SqlCommand: the command to execute</param>
            <param name="modelBinder">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <returns>IEnumerable of type T: the result set bound to a model, by way of the selector factory.</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``2(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``3(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``4(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``5(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Func{System.Data.IDataRecord,``4},System.Collections.Generic.List{``4},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T5">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder5">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output5">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlDbInstance.ExecuteAs``6(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Func{System.Data.IDataRecord,``4},System.Collections.Generic.List{``4},System.Func{System.Data.IDataRecord,``5},System.Collections.Generic.List{``5},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T5">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T6">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder5">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output5">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder6">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output6">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Grain.DataAccess.Sql.ISqlDbInstance.Dispose" -->
        <member name="M:Grain.DataAccess.Sql.DbInstance.Execute(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a non-query Transact-SQL statement and returns the number of rows that were affected (assuming NOCOUNT is not on)
            </summary>
            <param name="command">SqlCommand: the command to be executed</param>
            <returns>int: if NOCOUNT is on, on the database, the number of rows that were affected</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAsSingle``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand and returns a single result via a factory pattern (selector param).  If more than one result 
            was present in the SQL execution, all but the first are omitted.
            </summary>
            <typeparam name="T">The type of output object</typeparam>
            <param name="command">SqlCommand: the command to execute</param>
            <param name="modelBinder">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <returns>IEnumerable of type T: the result set bound to a model, by way of the selector factory.</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``1(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand and returns the results via a factory pattern (selector param)
            </summary>
            <typeparam name="T">The type of output object</typeparam>
            <param name="command">SqlCommand: the command to execute</param>
            <param name="modelBinder">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <returns>IEnumerable of type T: the result set bound to a model, by way of the selector factory.</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``2(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``3(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``4(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``5(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Func{System.Data.IDataRecord,``4},System.Collections.Generic.List{``4},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T5">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder5">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output5">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstance.ExecuteAs``6(System.Data.SqlClient.SqlCommand,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Func{System.Data.IDataRecord,``4},System.Collections.Generic.List{``4},System.Func{System.Data.IDataRecord,``5},System.Collections.Generic.List{``5},System.Data.CommandBehavior)">
            <summary>
            Executes a SqlCommand that expects four result sets and binds the results to the given models
            </summary>
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T5">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T6">Type: the type of object for the fourth result set</typeparam>
            <param name="command">SqlCommand: a stored procedure command</param>
            <param name="modelBinder1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="modelBinder2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="modelBinder3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="modelBinder4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder5">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output5">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="modelBinder6">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="output6">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="commandBehavior">CommandBehavior: a description of the results of the query and its effect on the database (our default is CloseConnection)</param>
            <returns>List of Type T: the results in a collection</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstanceExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.String)">
            <summary>
            Get the value or default(T) from a given IDataRecord (row) with the given column name
            </summary>
            <typeparam name="T">The type of output</typeparam>
            <param name="row">IDataRecord: the row that is being parsed</param>
            <param name="columnName">string: the column name for which to parse data from</param>
            <returns>Type of T: the value for the resulting field, as T</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstanceExtensions.GetValueOrDefault``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            Get the value or default(T) from a given IDataRecord (row) by column ordinal
            </summary>
            <typeparam name="T">The type of output</typeparam>
            <param name="row">IDataRecord: the row that is being parsed</param>
            <param name="ordinal">int: the ordinal of the column</param>
            <returns>Type of T: the value for the resulting field, as T</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstanceExtensions.ReadRecordsTo``1(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0}@)">
            <summary>
            read the records that are returned for a given command, and bind them to the output ref
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="modelBinder"></param>
            <param name="output"></param>
        </member>
        <member name="M:Grain.DataAccess.Sql.DbInstanceExtensions.ReadRecordsTo``6(System.Data.IDataReader,System.Func{System.Data.IDataRecord,``0},System.Collections.Generic.List{``0},System.Func{System.Data.IDataRecord,``1},System.Collections.Generic.List{``1},System.Func{System.Data.IDataRecord,``2},System.Collections.Generic.List{``2},System.Func{System.Data.IDataRecord,``3},System.Collections.Generic.List{``3},System.Func{System.Data.IDataRecord,``4},System.Collections.Generic.List{``4},System.Func{System.Data.IDataRecord,``5},System.Collections.Generic.List{``5})">
            <typeparam name="T1">Type: the type of object for the first result set</typeparam>
            <typeparam name="T2">Type: the type of object for the second result set</typeparam>
            <typeparam name="T3">Type: the type of object for the third result set</typeparam>
            <typeparam name="T4">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T5">Type: the type of object for the fourth result set</typeparam>
            <typeparam name="T6">Type: the type of object for the fourth result set</typeparam>
            <param name="reader">IDataReader: the open DataReader</param>
            <param name="factory1">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out1">A list to store the output from the first result set (treat as ref: must be initialized)</param>
            <param name="factory2">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out2">A list to store the output from the second result set (treat as ref: must be initialized)</param>
            <param name="factory3">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out3">A list to store the output from the third result set (treat as ref: must be initialized)</param>
            <param name="factory4">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out4">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="factory5">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out5">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
            <param name="factory6">Func of type IDataRecord and T: the factory for binding the output to a model</param>
            <param name="out6">A list to store the output from the fourth result set (treat as ref: must be initialized)</param>
        </member>
        <member name="M:Grain.DataAccess.Sql.ISqlCommandFactory.MakeProcCommand(System.String)">
            <summary>
            Make a SqlCommand of type StoredProc, that executes a command by the given proc
            </summary>
            <param name="proc">the name of the stored procedure (i.e. dbo.myProc)</param>
            <returns>The SqlCommand</returns>
        </member>
        <member name="M:Grain.DataAccess.Sql.SqlCommandFactory.MakeParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Make a SqlParameter with the values that are provided; convert null values to DBNull.Value
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Checks to see if a given type implements a given interface
            </summary>
            <param name="thisObjectType">Type: the type of object that might inherit the interface</param>
            <param name="typeOfInterface">Type: the type of interface</param>
            <returns>true if the given type inherits the interface</returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.ImplementsInterface``1(``0,System.Type)">
            <summary>
            Checks to see if a given object implements a given interface
            </summary>
            <param name="thisObjectType">Type of T: the object that might inherit the interface</param>
            <param name="typeOfInterface">Type: the type of interface</param>
            <returns>true if the given object inherits the interface</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Grain.Extensions.ClassExtensions.ImplementsGenericInterface(System.Type,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:Grain.Extensions.ClassExtensions.ImplementsGenericInterface``1(``0,System.Type)" -->
        <!-- Badly formed XML comment ignored for member "M:Grain.Extensions.ClassExtensions.FindDerivedTypes``1(System.Reflection.Assembly)" -->
        <member name="M:Grain.Extensions.ClassExtensions.TypeIsDerivedFrom``1(System.Type)">
            <summary>
            Checks to see if a type is derived from another type
            </summary>
            <typeparam name="TBase">Type: the base type</typeparam>
            <param name="type">Type: the type that might be derived from the base type</param>
            <returns>bool: true if the type is derived from the base type</returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.TypeIsNotDerivedFrom``1(System.Type)">
            <summary>
            Checks to see if a type is NOT derived from another type
            </summary>
            <typeparam name="TBase">Type: the base type</typeparam>
            <param name="type">Type: the type that might be derived from the base type</param>
            <returns>bool: true if the type is NOT derived from the base type</returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.FindTypesInNamespace(System.Reflection.Assembly,System.String)">
            <summary>
            Get all of the Types in a given namespace
            </summary>
            <param name="assembly">Assembly: the assembly that the namespace exists in</param>
            <param name="nameSpace">string: the fully qualified path to the namespace</param>
            <returns>List of type Type: the Types in the given namespace</returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.GetInstanceOf``1">
            <summary>
            Returns a new instance of an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.GetInstanceOf``1(System.Type[],System.Object[])">
            <summary>
            Returns a new instance of an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.GetInstanceOf(System.Type)">
            <summary>
            Returns a new instance of an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ClassExtensions.GetInstanceOf(System.Type,System.Type[],System.Object[])">
            <summary>
            Returns a new instance of an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ObjectCreator.GetInstanceOf(System.Type)">
            <summary>
            Dynamically get an instance of a class via a parameterless constructor, as fast as possible, without getting into IL.emit
            </summary>
            <param name="type">The type of object to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.ObjectCreator.GetActivator(System.Reflection.ConstructorInfo)">
            <summary>
            Dynamically get a class activator, as fast as possible, without getting into IL.emit
            </summary>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.InstanceCreator.GetInstanceOf``1">
            <summary>
            Dynamically get an instance of a class via a parameterless constructor, as fast as possible, without getting into IL.emit
            </summary>
            <typeparam name="T">The type of object to invoke</typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.InstanceCreator.GetActivator``1(System.Reflection.ConstructorInfo)">
            <summary>
            Dynamically get a class activator, as fast as possible, without getting into IL.emit
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Grain.Extensions.ConcurrentDictionaryExtensions.GetOrAddLazy``2(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Lazy{``1}},``0,System.Func{``0,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:Grain.Extensions.ConcurrentDictionaryExtensions.AddOrUpdateLazy``2(System.Collections.Concurrent.ConcurrentDictionary{``0,System.Lazy{``1}},``0,System.Func{``0,``1},System.Func{``0,``1,``1})" -->
        <member name="M:Grain.Extensions.DateTimeExtensions.EachDay(System.DateTime,System.DateTime)">
            <summary>
            Creates an IEnumberable object that can be used to iterate of each day between two dates
            </summary>
            <param name="from">DateTime: the start date</param>
            <param name="thru">DateTime: then end date</param>
            <returns>IEnumberable: of type DateTime</returns>
        </member>
        <member name="M:Grain.Extensions.DateTimeExtensions.IsInThePast(System.DateTime)">
            <summary>
            Returns true if the dateTime is before now.
            </summary>
            <param name="dateTime">The DateTime to compare to now</param>
            <returns>Returns true if the dateTime is before now.</returns>
        </member>
        <member name="M:Grain.Extensions.DateTimeExtensions.IsInThePast(System.DateTime,System.TimeSpan)">
            <summary>
            Returns true if the dateTime is atleast the amount of the timeSpan before now
            </summary>
            <param name="dateTime">The DateTime to compare to now</param>
            <param name="timeSpan">the duration of time before now that is being validated</param>
            <returns>Returns true if the dateTime is atleast the amount of the timeSpan before now</returns>
        </member>
        <member name="M:Grain.Extensions.DateTimeExtensions.IsInTheFuture(System.DateTime)">
            <summary>
            Returns true if the dateTime is after now.
            </summary>
            <param name="dateTime">The DateTime to compare to now</param>
            <returns>Returns true if the dateTime is after now.</returns>
        </member>
        <member name="M:Grain.Extensions.DateTimeExtensions.IsInTheFuture(System.DateTime,System.TimeSpan)">
            <summary>
            Returns true if the dateTime is atleast the amount of the timeSpan after now
            </summary>
            <param name="dateTime">The DateTime to compare to now</param>
            <param name="timeSpan">the duration of time after now that is being validated</param>
            <returns>Returns true if the dateTime is atleast the amount of the timeSpan after now</returns>
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.AsEnumerableInts(System.Enum)">
            <summary>
            Converts a Flagged Enum to a collection of int values for each flag that the input parameter has set.
            0 (default) is only returned if it is the only flag that is set.
            </summary>
            <param name="input">Enum: the enum with flags to export</param>
            <returns>A collection of integers that represent the flags that are set on the given enum</returns>        
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.AsEnumerableInts(System.Enum,System.Boolean)">
            <summary>
            Converts a Flagged Enum to a collection of int values for each flag that the input parameter has set.
            </summary>
            <param name="input">Enum: the enum with flags to export</param>
            <param name="omitZeroFlag">This method will return 0 in addition to any flags that are set, unless omitZeroFlag is true.</param>
            <returns>A collection of integers that represent the flags that are set on the given enum</returns>
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.AsEnumerableNames``1(System.Enum)">
            <summary>
            Converts a Flagged Enum to a collection of string values for each flag that the input parameter has set.
            0 (default) is only returned if it is the only flag that is set.
            </summary>
            <typeparam name="T">The Enum type is required to be able to get the name</typeparam>
            <param name="input">Enum: the enum with flags to export</param>
            <returns>A collection of enums that represent the flags that are set on the given enum</returns>  
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.AsEnumerable(System.Enum)">
            <summary>
            Converts a Flagged Enum to a collection of Enum values for each flag that the input parameter has set.
            0 (default) is only returned if it is the only flag that is set.
            </summary>
            <param name="input">Enum: the enum with flags to export</param>
            <returns>A collection of enums that represent the flags that are set on the given enum</returns>  
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.AsEnumerable(System.Enum,System.Boolean)">
            <summary>
            Converts a Flagged Enum to a collection of Enum values for each flag that the input parameter has set.
            0 (default) is only returned if it is the only flag that is set.
            </summary>
            <param name="input">Enum: the enum with flags to export</param>
            <param name="omitZeroFlag">This method will return 0 in addition to any flags that are set, unless omitZeroFlag is true.</param>
            <returns>A collection of enums that represent the flags that are set on the given enum</returns>  
        </member>
        <member name="M:Grain.Extensions.EnumExtensions.EnumsAreEqual``2">
            <summary>
            Compares the int
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the specified IEnumerable object is null (Nothing) or Empty (has no values).
            </summary>
            <typeparam name="T">object: the type of IEnumerable object</typeparam>
            <param name="source">object: the IEnumerable object itself</param>
            <returns>bool: true if the object is null or empty</returns>
            <example>
            var _settings = db.Settings.Where(s => s.Default == true);
            bool _settingsAreEmpty = _settings.IsEmpty(); 
            </example>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the specified string is null (Nothing) or an Empty string.
            </summary>
            <param name="source">string: the string to check</param>
            <returns>bool: true if the string has no value</returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the specified IEnumerable object is not null (Nothing) and is not Empty (it has at least one value).
            </summary>
            <typeparam name="T">object: the type of IEnumerable object</typeparam>
            <param name="source">object: the IEnumerable object itself</param>
            <returns>bool: true if the object has a value</returns>
            <example>
            var _settings = db.Settings.Where(s => s.Default == true);
            bool _settingsAreNotEmpty = _settings.IsNotEmpty(); 
            </example>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.IsNotEmptyOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the specified string has a value.
            </summary>
            <param name="source">string: the string to check</param>
            <returns>bool: true if the string has a value</returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.AsType``1(System.Collections.IEnumerable)">
            <summary>
            Get a list of objects as a derived type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.GuidIsEmpty(System.Nullable{System.Guid})">
            <summary>
            Indicates whether the specified Guid has a value.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.GuidIsNotEmpty(System.Nullable{System.Guid})">
            <summary>
            Indicates whether the specified Guid has a value.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.GuidIsEmpty(System.Guid)">
            <summary>
            Indicates whether the specified Guid has a value.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.GuidIsNotEmpty(System.Guid)">
            <summary>
            Indicates whether the specified Guid has a value.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.ToGuid(System.String)">
            <summary>
            Converts a string into a Guid
            </summary>
            <param name="source">string: the string you wish to convert</param>
            <returns>Guid: the Guid</returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.ToList(System.String,System.Char)">
            <summary>
            Casts a deliminated string to a List
            </summary>
            <param name="input"></param>
            <param name="deliminator"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.ToHashSet(System.String,System.Char)">
            <summary>
            Casts a deliminated string to a HashSet
            </summary>
            <param name="input"></param>
            <param name="deliminator"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.Merge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Returns a new list of values merged from the input and the other list that are passed as parameters
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="input"></param>
            <param name="others"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Returns a new dictionary of values merged from the input and the other dictionaries that are passed as parameters
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="input"></param>
            <param name="others"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.MergeHtmlAttributesLeft(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Iterates over the values of two Dictionaries to merge and override values to the left.  Html classes are treated differently, in that they are appended, rather than overridden.
            </summary>
            <param name="HtmlAttributes"></param>
            <param name="HtmlAttributesThatOverride"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.RenameKey(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Replaces the value for a given key to the new value that is passed as a parameter.
            This does not iterate over similar values - the key must be exact.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="input"></param>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.Replace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Replaces the value for a given key to the new value that is passed as a parameter.
            This does not iterate over similar values - the key must be exact.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="input"></param>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Replaces the value for a given key to the new value that is passed as a parameter.
            This does not iterate over similar values - the key must be exact.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="input"></param>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.IEnumerableExtensions.Replace(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Replaces the value for a given key to the new value that is passed as a parameter.
            This does not iterate over similar values - the key must be exact.
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.PluralizationExtensions.Pluralize(System.String)">
            <summary>
            Convenience method for pluralizing words
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.PluralizationExtensions.Singularize(System.String)">
            <summary>
            Convenience method for singularizing words
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.Remove(System.String,System.String)">
            <summary>
            Removes the given characters from the input string
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characters">string: the characters to remove from the string</param>
            <returns>string: the input string without the characters that were to be removed.</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveExtraSpaces(System.String)">
            <summary>
            Removes any spaces that occur more than once in a row (i.e. double spaces)
            </summary>
            <param name="input">string: the string to process</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveSpaces(System.String)">
            <summary>
            Removes spaces in a string
            </summary>
            <param name="input">string: the string to process</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ReplaceSpaces(System.String,System.String)">
            <summary>
            Removes any spaces that occur more than once in a row (i.e. double spaces) and then replaces single spaces with the
            character that was passed as a parameter
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characterToReplaceWith">string: the character to replace spaces with</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemovePunctuation(System.String)">
            <summary>
            Removes all punctuation in a string.  Special Characters are retained.
            </summary>
            <param name="input">string: the string to process</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveSpecialCharacters(System.String)">
            <summary>
            Removes all punctuation and special characters in a string  (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveSpecialCharacters(System.String,System.Boolean)">
            <summary>
            Removes a subset of punctuation and special characters in a string.  If preserveUnderscores is true, then underscores are retained.  (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="preserveUnderscores">bool: underscores are retained when this is true, otherwise they are removed</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ReplaceSpecialCharacters(System.String,System.String)">
            <summary>
            Replaces a subset of punctuation in a string with the character that is passed as a parameter (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characterToReplaceWith">string: the character to replace spaces with</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveCharacters(System.String,System.Char[])">
            <summary>
            Removes a subset of punctuation in a string (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characters">Character Array: the characters to remove</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ReplaceCharacters(System.String,System.String,System.Char[])">
            <summary>
            Replaces a subset of punctuation in a string with the character that is passed as a parameter (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characterToReplaceWith">string: the character to replace spaces with</param>
            <param name="characters">Character Array: the characters to remove</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveCharacters(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Removes a subset of punctuation in a string (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characters">List of type string: the characters to remove</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ReplaceCharacters(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Replaces a subset of punctuation in a string with the character that is passed as a parameter (English Only)
            </summary>
            <param name="input">string: the string to process</param>
            <param name="characterToReplaceWith">string: the character to replace spaces with</param>
            <param name="characters">List of type string: the characters to remove</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveBetween(System.String,System.Char)">
            <summary>
            Removes the content between the startAndEndChar character
            </summary>
            <param name="input">string: the string to process</param>
            <param name="startAndEndChar">char: the beginning and ending character deliminator</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveBetween(System.String,System.Char,System.Char)">
            <summary>
            Removes the content between start and end characters
            </summary>
            <param name="input">string: the string to process</param>
            <param name="startChar">char: the beginning character deliminator</param>
            <param name="endChar">char: the ending character deliminator</param>
            <returns>string: the formatted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.GetBetween(System.String,System.Char)">
            <summary>
            Gets the content between the startAndEndChar character and returns it in a list
            </summary>
            <param name="input">string: the string to process</param>
            <param name="startAndEndChar">char: the beginning and ending character deliminator</param>
            <returns>List of type string: the phrases that were found between the start and end characters</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.GetBetween(System.String,System.Char,System.Char)">
            <summary>
            Gets the content between the start and end characters and returns it in a list
            </summary>
            <param name="input">string: the string to process</param>
            <param name="startChar">char: the beginning character deliminator</param>
            <param name="endChar">char: the ending character deliminator</param>
            <returns>List of type string: the phrases that were found between the start and end characters</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.AppendCssClass(System.String,System.String)">
            <summary>
            Adds a Css Class to an existing class string
            </summary>
            <param name="cssClass"></param>
            <param name="classToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ForceLastCharacterBackSlash(System.String)">
            <summary>
            Ensures that the last character of a string is a backslash ( \ ), for use with path concatenation.
            For instance, if the path "C:\Users\blah" is provided as the input, the result will be "C:\Users\blah\". 
            If the backslash is already present, then nothing is changed.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ForceLastCharacterForwardSlash(System.String)">
            <summary>
            Ensures that the last character of a string is a forward slash ( / ), for use with path concatenation.
            For instance, if the path "/Controller/Action" is provided as the input, the result will be "/Controller/Action/". 
            If the forward slash is already present, then nothing is changed.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveLastCharacterForwardSlash(System.String)">
            <summary>
            Ensures that the last character of a string is NOT a forward slash ( / ), for use with path concatenation.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ForceFirstCharacterForwardSlash(System.String)">
            <summary>
            Ensures that the first character of a string is a forward slash ( / ), for use with path concatenation.
            For instance, if the path "Controller/Action/" is provided as the input, the result will be "/Controller/Action/". 
            If the forward slash is already present, then nothing is changed.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.RemoveFirstCharacterForwardSlash(System.String)">
            <summary>
            Ensures that the first character of a string is NOT a forward slash ( / ), for use with path concatenation.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ForceFirstAndLastCharacterForwardSlashes(System.String)">
            <summary>
            Ensures that the first and last characters of a string are forward slashes ( / ), for use with path concatenation.
            For instance, if the path "Controller/Action" is provided as the input, the result will be "/Controller/Action/". 
            If the forward slash is already present, then nothing is changed.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToUpper(System.Guid)">
            <summary>
            Casts a Guid to an upper case string
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToLower(System.Guid)">
            <summary>
            Casts a Guid to a lower case string
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToString``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a List of objects to a string.  This method assumes that the object type can be cast to a string
            </summary>
            <param name="input">The List of objects to stringify</param>
            <returns>string: the object contents as a list, if they can be cast to a string, otherwise a string filled with the object types</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToDeliminatedString``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Converts a List of objects to a string and allows you to set the deliminator and choose whether or not to remove the final deliminator.  
            This method assumes that the object type can be cast to a string
            </summary>
            <param name="input">The List of objects to stringify</param>
            <param name="deliminator">string: the character to deliminate the List values with</param>
            <returns>string: the object contents as a list, if they can be cast to a string, otherwise a string filled with the object types</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToDeliminatedString``1(System.Collections.Generic.List{``0},System.String,System.Boolean)">
            <summary>
            Converts a List of objects to a string and allows you to set the deliminator and choose whether or not to remove the final deliminator.  
            This method assumes that the object type can be cast to a string
            </summary>
            <param name="input">The List of objects to stringify</param>
            <param name="deliminator">string: the character to deliminate the List values with</param>
            <param name="removeLastDeliminator">bool: true, if the last deliminator should be removed from the string</param>
            <returns>string: the object contents as a list, if they can be cast to a string, otherwise a string filled with the object types</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToDeliminatedString(System.String,System.String,System.String)">
            <summary>
            Concatenates the value of the first string (the key, or name) with a deliminator and the value of the second string (the value).
            
            For instance:
            string _identity = "Andy";
            string _guid = "90E852A1-FB91-4401-949A-AEF4905CA001";
            _identity.ToDeliminatedString(_guid, "^") will return "Andy^90E852A1-FB91-4401-949A-AEF4905CA001"
            </summary>
            <param name="key">string: the key or name</param>
            <param name="value">string: the value or second string</param>
            <param name="deliminator">string: the character to deliminate the strings with</param>        
            <returns>string: the two values with a deliminator in between</returns>>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.MD5Hash(System.String)">
            <summary>
            Encrypts a string using MD5 and returns the encrypted string
            </summary>
            <param name="input">string: the string you wish to encode</param>
            <returns>string: the encrypted string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.VerifyMd5Hash(System.String,System.String)">
            <summary>
            Verify's the content of an MD5 hash against the unencrypted string
            </summary>
            <param name="input">string: the unencrypted string</param>
            <param name="hash">string: the encrypted string</param>
            <returns>bool: true if the hash is valid</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.ToBase64String(System.String)">
            <summary>
            Encodes a string as Base64
            </summary>
            <param name="input">string: the string to encode</param>
            <returns>string: the Base64 encoded string</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.FromBase64String(System.String)">
            <summary>
            Decodes a string from Base64
            </summary>
            <param name="input">string: the string to decode</param>
            <returns>string: the string that was encoded as Base64</returns>
        </member>
        <member name="M:Grain.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether an element is in the List, using StringComparison
            </summary>
            <param name="target">The string/target to compare against</param>
            <param name="value">The string to look for in the input/target</param>
            <param name="comparison">StringComparison: the comparison type</param>
            <returns>bool: true if the string contains the given value</returns>
            <example>myList.FindAll(s => s.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase));</example>
        </member>
        <member name="F:Grain.Extensions.StringExtensions.Characters">
            <summary>
            A List of characters for use with string formatting
            </summary>
        </member>
        <member name="M:Grain.Dynamic.ExpandoJsonObject.InitializeDataFromJson">
            <summary>
            If the data needs to be deserialized from JSON, deserializes the value of the _privateJsonValue field 
            into an object that is stored in the Value._Data property.
            </summary>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.GetInstance">
            <summary>
            Get the PluralizationRepo instance
            </summary>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.AddPluralizationOverride(System.String,System.String)">
            <summary>
            Add a pluralization override to the repository
            </summary>
            <param name="singularForm">The singular form of a word (i.e. Quiz)</param>
            <param name="pluralForm">The plural form of a word (i.e Quizzes)</param>
            <returns>true if the addition completes successfully</returns>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.RemovePluralizationOverride(System.String)">
            <summary>
            Remove a pluralization override from the repository
            </summary>
            <param name="singularForm">singular form of the word you wish to remove from the repository</param>
            <returns>true if the addition completes successfully</returns>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.AddPluralizationOverrides(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a collection of pluralization overrides to the repository. This is not designed for best performance, as it is expected to be used in 
            an AppStart routine, rather than over and over again.
            </summary>
            <param name="wordPairs">a dictionary of singularForm, pluralForm values to add to the repository</param>
            <returns>true if the addition completes successfully</returns>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.RemovePluralizationOverrides(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Removes a collection of pluralization overrides from the repository. This is not designed for best performance, as it is expected to be used in 
            an AppStart routine, rather than over and over again.
            </summary>
            <param name="singularForms">a list of the singular form of the words you wish to remove from the repository</param>
            <returns>true if the addition completes successfully</returns>
        </member>
        <member name="M:Grain.Repositories.PluralizationRepository.RemovePluralizationOverrides(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Removes a collection of pluralization overrides from the repository. This is not designed for best performance, as it is expected to be used in 
            an AppStart routine, rather than over and over again.
            </summary>
            <param name="wordPairs">a dictionary of singularForm, pluralForm values to remove from the repository</param>
            <returns>true if the addition completes successfully</returns>
        </member>
        <member name="P:Grain.Repositories.PluralizationRepository.PluralizationWords">
            <summary>
            A list of the words, both singular and plural versions, that will be used when overriding Microsoft's pluralization library
            </summary>
        </member>
        <member name="P:Grain.Repositories.PluralizationRepository.PluralizationOverrides">
            <summary>
            A dictionary of the words, where the Key is the singular version and the Value is the plural version, that will be used when overriding Microsoft's pluralization library
            </summary>
        </member>
        <member name="P:Grain.Repositories.PluralizationRepository.Instance">
            <summary>
            Get the PluralizationRepo instance
            </summary>
        </member>
        <member name="M:Grain.Serialization.BinarySerializer.ToBinary``1(``0)">
            <summary>
            Converts the object to a binary array by serializing.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="item">The object to convert.</param>
            <returns>A serialized binary array of the object.</returns>
        </member>
        <member name="M:Grain.Serialization.BinarySerializer.FromBinary``1(System.Byte[])">
            <summary>
            Reconstruct an object from a Binary JSON string (BSON)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bson"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.Conversions.TryConvert``1(System.Object)">
            <summary>
            Tries to convert an object to a given type.  If the object is binary, it uses Pollen.Serialization.JsonSerializer.FromBson(), 
            so the binary format is expected to be BSON.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.Conversions.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            To convert a Byte Array of Unicode values (UTF-8 encoded) to a complete String.
            </summary>
            <param name="characters">Unicode Byte Array to be converted to String</param>
            <returns>String converted from Unicode Byte Array</returns>
        </member>
        <member name="M:Grain.Serialization.Conversions.StringToUTF8ByteArray(System.String)">
            <summary>
            Converts the String to UTF8 Byte array and is used in De serialization
            </summary>
            <param name="pXmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.DictionarySerializer.ToDictionary(System.String,System.Char,System.Char)">
            <summary>
            Splits a string into a Dictionary of KeyValuePairs.
            </summary>
            <param name="input">string: a string of KeyValuePairs that are separated by two different deliminators</param>
            <param name="pairDeliminator">char: the deliminator that separates KeyValuePairs from each other</param>
            <param name="keyValueDeliminator">char: the deliminator that separates the Key from the Value in each pair</param>
            <example>
            type:text,class:color_blue text_center,name:my_input_field
            </example>
            <returns>IDictionary of type string, string: the string cast into a generic Dictionary, or null if the string was empty or malformed</returns>
        </member>
        <member name="M:Grain.Serialization.DictionarySerializer.ToDictionaryFromJson(System.String)">
            <summary>
            Returns a dictionary representation of a JSON object, where all property names
            are entered as keys in the dictionary, and all property values
            are either primitives (int, string), lists, or dictionaries.
            JSON object may contain nested objects and lists to any depth.
            </summary>
            <param name="jsonContent"></param>
            <returns></returns>
        </member>
        <member name="T:Grain.Serialization.DynamicSerializer">
            <summary>
            The DynamicSerializer class is still a Lab, even though it is moved into the main Grain library.
            Use with caution.
            </summary>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.ToExpando(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Extension method that turns a dictionary of string and object to an ExpandoObject
            </summary>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.ToExpando(System.Object)">
            <summary>
            Extension method that turns an XElement to an ExpandoObject
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.DynamicToXML(System.Object)">
            <summary>
            Serializes an ExpandoObject as XML
            </summary>
            <param name="_object">dynamic: the ExpandoObject</param>
            <returns>XElement: the XML node</returns>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.DynamicToXML(System.Object,System.String)">
            <summary>
            Serializes an ExpandoObject as XML
            (WARNING) This method is beta and does not fully support recursion!
            </summary>
            <param name="_object">dynamic: the ExpandoObject</param>
            <param name="rootName">String: the name of the XML node to create</param>
            <returns>XElement: the XML node</returns>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.DynamicFromXML(System.String)">
            <summary>
            Extension method that turns an XML string to an ExpandoObject
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.DynamicFromXML(System.Xml.Linq.XElement)">
            <summary>
            Extension method that turns an XElement to an ExpandoObject
            </summary>
            <param name="xml"></param>
            <returns></returns>
            Inspired by: http://www.codeproject.com/Tips/227139/Converting-XML-to-an-dynamic-object-using-ExpandoO
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.XmlParentNodeName(System.String)">
            <summary>
            Used to format the form name for parent nodes in Xml (eg. People, Projects)
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.DynamicSerializer.XmlChildNodeName(System.String)">
            <summary>
            Used to format the form name for child nodes in Xml (eg. Person, Project)
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.ToJson``1(``0,System.Boolean)">
            <summary>
            Serialize an object into a JSON string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.ToJson(System.Object,System.Boolean)">
            <summary>
            Serialize an object into a JSON string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.ToBson(System.Object)">
            <summary>
            Serialize an object into a Binary JSON string (BSON)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.FromJson``1(System.String)">
            <summary>
            Reconstruct an object from a JSON string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.FromJson(System.String,System.Type)">
            <summary>
            Reconstruct an object from a JSON string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.FromBson``1(System.Byte[])">
            <summary>
            Reconstruct an object from a Binary JSON string (BSON)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bson"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.JsonSerializer.FromBson(System.Byte[],System.Type)">
            <summary>
            Reconstruct an object from a Binary JSON string (BSON)
            </summary>
            <param name="bson"></param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.ToXml``1(``0)">
            <summary>
            Returns an XML string that represents the current object 
            
            The DataContractSerializer is ~10% faster than the XMLSerializer, but provides less control 
            in the XML structure.  As an example, attributes are not supported and all members are represented as elements.
            The class should be decorated with DataContract and DataMember attributes to be serialized with the DataContractSerializer.
            
            DataContractSerializer Serializes only the properties of a class that are decorated with DataMember attributes.
            It also has better built in support for generics
            </summary>
            <param name="item">the object to be serialized</param>
            <param name="type">The DataContract type</param>
            <returns>An XML string that represents the current object</returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.ToXml(System.Object,System.Type)">
            <summary>
            Returns an XML string that represents the current object 
            
            The DataContractSerializer is ~10% faster than the XMLSerializer, but provides less control 
            in the XML structure.  As an example, attributes are not supported and all members are represented as elements.
            The class should be decorated with DataContract and DataMember attributes to be serialized with the DataContractSerializer.
            
            DataContractSerializer Serializes only the properties of a class that are decorated with DataMember attributes.
            It also has better built in support for generics
            </summary>
            <param name="item">the object to be serialized</param>
            <param name="type">The DataContract type</param>
            <returns>An XML string that represents the current object</returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.ToXml``1(``0,System.Boolean)">
            <summary>
            Serialize an object into an XML string, using the XMLSerializer.
            
            The XMLSerializer is ~10% slower than the DataContractSerializer, but provides greater control 
            in the XML structure, using data annotations such as XElement, XAttribute and XmlIgnore.
            
            XMLSerializer Serializes all properties of a class, unless they are decorated with the XmlIgnore attribute.
            </summary>
            <typeparam name="T">Type: the type of object to serialize</typeparam>
            <param name="item">The object to serialize</param>
            <param name="useDataContractSerializer">
            bool: if true, a DataContractSerializer is used to serialize the XML, 
            otherwise an XmlSerializer is used.
            </param>/// 
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.ToXml``1(``0,System.String)">
            <summary>
            Serialize an object into an XML string, using the XMLSerializer.
            
            The XMLSerializer is ~10% slower than the DataContractSerializer, but provides greater control 
            in the XML structure, using data annotations such as XElement, XAttribute and XmlIgnore.
            
            XMLSerializer Serializes all properties of a class, unless they are decorated with the XmlIgnore attribute.
            </summary>
            <typeparam name="T">Type: the type of object to serialize</typeparam>
            <param name="item">The object to serialize</param>
            <param name="rootName">string: the name of the root element to be used if the object is of type ExpandoObject or Object</param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.ToXml(System.Object,System.Type,System.String)">
            <summary>
            Serialize an object into an XML string, using the XMLSerializer.
            
            The XMLSerializer is ~10% slower than the DataContractSerializer, but provides greater control 
            in the XML structure, using data annotations such as XElement, XAttribute and XmlIgnore.
            
            XMLSerializer Serializes all properties of a class, unless they are decorated with the XmlIgnore attribute.
            </summary>
            <param name="item">The object to serialize</param>
            <param name="type">Type: the type of object to serialize</param>
            <param name="rootName">string: the name of the root element to be used if the object is of type ExpandoObject or Object</param>
            <returns></returns>
            <remarks>
            Partial Credit: http://stackoverflow.com/questions/4970542/consuming-rest-web-service-in-net-mvc-3
            </remarks>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.FromXml``1(System.String)">
            <summary>
            Reconstruct an object from an XML string, using DataContractSerializer
            </summary>
            <typeparam name="T">Type: the type of object to deserialize</typeparam>
            <param name="xml">string: the xml to deserialize</param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.FromXml(System.String,System.Type)">
            <summary>
            Reconstruct an object from an XML string, using DataContractSerializer
            </summary>
            <param name="xml">string: the xml to deserialize</param>
            <param name="type">Type: the type of object to deserialize</param>
            <returns></returns>
        </member>
        <member name="M:Grain.Serialization.XMLSerializer.FromXml``1(System.String,System.Boolean)">
            <summary>
            Reconstruct an object from an XML string
            </summary>
            <typeparam name="T">Type: the type of object to deserialize</typeparam>
            <param name="xml">string: the xml to deserialize</param>
            <param name="useDataContractSerializer">
            bool: if true, a DataContractSerializer is used to deserialize the XML, 
            otherwise an XmlSerializer is used.
            </param>
            <returns></returns>
            http://stackoverflow.com/questions/4970542/consuming-rest-web-service-in-net-mvc-3
        </member>
    </members>
</doc>
